<div id="dropzone_<%= method %>_<%= cycle(*(1..999).to_a, name: method) %>" class="dropzone" data-total="<%=object.send(method).count%>">
  <span class="notice"><%=t 'dropzone.drag_or_click' %></span>
  <% object.send(method).each_with_index do |dropzone_object, index|
    object_id = dropzone_object[object.class.send("dropzone_#{ method }_field", :id)]
  %>
    <%= hidden_field_tag "#{ object.class.model_name.singular }[#{ method }_attributes][#{ index }][#{ object.class.send("dropzone_#{ method }_field", :id) }]", object_id, {"data-id" => object_id } %>

    <%= hidden_field_tag "#{ object.class.model_name.singular }[#{ method }_attributes][#{ index }][#{ object.class.send("dropzone_#{ method }_field", :container_id) }]", dropzone_object.send(object.class.send("dropzone_#{ method }_field", :container_id)), { "data-id" => object_id} %>

    <%= hidden_field_tag "#{ object.class.model_name.singular }[#{ method }_attributes][#{ index }][#{ object.class.send("dropzone_#{ method }_field", :title) }]", dropzone_object.send(object.class.send("dropzone_#{ method }_field", :title)), { "data-id" => object_id, class: object.class.send("dropzone_#{ method }_field", :title) } %>

    <%= hidden_field_tag "#{ object.class.model_name.singular }[#{ method }_attributes][#{ index }][#{ object.class.send("dropzone_#{ method }_field", :position) }]", index, { "data-id" => object_id, class: object.class.send("dropzone_#{ method }_field", :position) } %>
  <% end %>
</div>

<% unless options[:hint].blank? %>
  <p class="inline-hints dropzone-hint"><%= options[:hint] %></p>
<% end %>
<script>
  (function() {
    Dropzone.autoDiscover = false;
    var url = '<%= upload_dropzone_path(dropzonable_id: (object.new_record? ? nil : object.id), dropzonable_class: object.class, dropzone_class: object.class.send("dropzone_#{ method }_class")) %>';

    var mockFiles = <%= render_mock_dropzone_files(object.send(method)) %>;
    var dropzone_id = "#dropzone_<%= method %>_<%= current_cycle(method) %>"; 
    var dropzone = new Dropzone(dropzone_id, { 
      url: '<%= raw upload_dropzone_path(dropzonable_id: (object.new_record? ? nil : object.id), dropzonable_class: object.class, dropzone_class: object.class.send("dropzone_#{ method }_class")) %>',
      dictCancelUpload: '<%=t "dropzone.cancel" %>',
      dictRemoveFile: '<%=t "dropzone.remove" %>',
      maxFiles: <%= defined?(max_files) ? '1' : 'null' %>,
      sending: function(file, xhr, formData) {
        xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').prop('content'));
      },
      success: function(file, data) {
        var cnt = parseInt($(dropzone_id).data('total'))+1;
        $(dropzone_id).data('total', cnt);
        
        $(dropzone_id).append('<input type="hidden" name="<%= object.class.model_name.singular %>[<%= method %>_attributes][' + cnt + '][<%= object.class.send("dropzone_#{ method }_field", :title) %>]" class="<%= object.class.send("dropzone_#{ method }_field", :title) %>" data-id="'+ data.id +'" value="' + data.title + '" />');
        $(dropzone_id).append('<input type="hidden" name="<%= object.class.model_name.singular %>[<%= method %>_attributes][' + cnt + '][<%= object.class.send("dropzone_#{ method }_field", :title) %>]" class="<%= object.class.send("dropzone_#{ method }_field", :position) %>" data-id="'+ data.id +'" value="' + (cnt-1) + '" />');
        
        $(file.previewElement).attr('data-id', data.id);
        $(file.previewElement).attr('data-url', data.url);
        $(file.previewElement).find('.dz-filename span').text(data.title);
        return file.previewElement.classList.add("dz-success");
      },
      removedfile: function(file) {
        $(dropzone_id + ' input[data-id' + file.id + ']').remove();
        $(file.previewElement).remove();
        $(dropzone_id).sortable('refresh');
      }
    });

    $(dropzone_id).sortable({
      items: '.dz-preview',
      placeholder: 'sortable-placeholder'
    });

    var func = function(file) {
      if (file.id)
        $(file.previewElement).attr('data-id', file.id);

      $(file.previewElement).find('.dz-filename, img').on('click', function() {
        var id = $(this).parents('.dz-preview:first').attr('data-id');
        var input = $(dropzone_id + ' input[data-id="' + id + '"].<%= object.class.send("dropzone_#{ method }_field", :title) %>');
        var title = prompt("<%=t 'dropzone.title' %>: ", $(file.previewElement).find('.dz-filename span').text());
        $(file.previewElement).find('.dz-filename span').text(title);
        input.val(title);
      });
    };

    var generate_dropzone_position_elements = function() {
      var position = 0;
      $(dropzone_id + ' .dz-preview').each(function() {
        var id = $(this).data('id');
        var input = $(dropzone_id + ' input[data-id="' + id + '"].<%= object.class.send("dropzone_#{ method }_field", :position) %>');
        input.attr("value", position++);
      });
    };

    dropzone.on('addedfile', func);

    for (var i = 0; i < mockFiles.length; i++) {
      var mockFile = mockFiles[i];
      dropzone.options.addedfile.call(dropzone, mockFile);
      func(mockFile);
      if (mockFile.url)
        $(mockFile.previewElement).attr('data-url', mockFile.url);
    }

    $('form').submit(function(e) {
        if (dropzone.getQueuedFiles().length > 0 || dropzone.getUploadingFiles().length > 0) {
        if (confirm("<%=t 'dropzone.are_you_sure' %>") == true) {
          generate_dropzone_position_elements();
        } else {
          e.preventDefault();
        }
      } else {
        generate_dropzone_position_elements();
      }
    });

    window.<%= method %>_dropzone = dropzone;
  })();
</script>